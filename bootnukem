#!/usr/bin/env bash

# bootnukem: purge old/unused kernel packages, clearing space on /boot

version=0.2.2

main() {
  local kernels="$(select_kernels)"
  if [ "$dry" = yes ]; then
    list_kernels
  else
    purge_kernels
  fi
}

list_kernels() {
  [ -z "$kernels" ] && return
  cat <<EOF
Kernel packages to be removed:

$kernels

EOF
  if [ "$dry" = yes ]; then
    echo "NOTE: no action has been taken"
  fi
}

purge_kernels() {
  [ -z "$kernels" ] && return
  [ "$(whoami)" != root ] && echo "You must be root!" && exit 1

  header=$(df -h /boot | head -1)
  disk_before=$(df -h /boot | tail -1)

  list_kernels

  apt-get purge -y $kernels
  update-grub

  disk_after=$(df -h /boot | tail -1)
  echo
  echo $header
  echo "$disk_before  (before)"
  echo "$disk_after  (after)"
}

select_kernels() {
if [ "$scorch" = yes ]; then
  select_all_kernels_except_running
else
  select_kernels_older_than_running
fi
}


select_kernels_older_than_running() {
  local running_version=$(running_kernel_version)
  local test_version k
  for k in $(list_all_installed_kernels); do
    test_version=$(echo $k | sed -e 's/linux-[[:alpha:]]*-//' -e's/-[[:alpha:]]*$//')
    if dpkg --compare-versions $test_version lt $running_version; then
      echo $k
    fi
  done
}

select_all_kernels_except_running() {
  list_all_installed_kernels | grep -v $(running_kernel_version)
}

list_all_installed_kernels() {
  dpkg -l linux-{image,headers}-"[0-9]*" | awk '/ii/{print $2}'
}

running_kernel_version() {
  uname -r | sed 's/-[[:alpha:]]*$//'
}

version() {
  echo $version
  exit 0
}

usage() {
cat <<EOF
bootnukem $OPTIONS
$*

       Usage: bootnukem <[options]>
       Options:
                            Without args: Prune all kernels older than running one

               --dry-run    Does not purge, only shows what *would* be removed ($dry)
               --scorch     Prune all kernels *except* the running one ($scorch)
               --help       Show this help message
               --version    Show only the version number

version $version, see also 'man bootnukem'
EOF
exit 1
}

OPTIONS="$@"

dry='no'
scorch='no'

for option in $OPTIONS; do
  case "$option" in
    --dry-run) dry=yes                   ;;
    --scorch ) scorch=yes                ;;
    --help   ) usage                     ;;
    --version) version                   ;;
    * )  usage " >>>> invalid option(s)" ;;
  esac
done

main
exit 0
